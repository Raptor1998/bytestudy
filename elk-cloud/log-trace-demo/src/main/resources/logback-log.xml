<?xml version="1.0" encoding="UTF-8"?>
<configuration debug="false" xmlns="http://ch.qos.logback/xml/ns/logback"
               xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
               xsi:schemaLocation="http://ch.qos.logback/xml/ns/logback
               https://raw.githubusercontent.com/enricopulatzo/logback-XSD/master/src/main/xsd/logback.xsd">
    <!-- 日志存放路径 -->
    <property name="log.path" value="/Users/bytedance/IdeaProjects/bytestudy/ELK/log"/>

    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter"/>
    <conversionRule conversionWord="wex"
                    converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"/>
    <conversionRule conversionWord="wEx"
                    converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"/>
    <!-- 日志输出格式 -->
    <property name="log.pattern"
              value="%d{yyyy-MM-dd HH:mm:ss.SSS} | [%thread] | %-5level | %logger{50} | %X{traceId} | [%method,%line] | %msg%n"/>
    <!-- 控制台输出 -->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>${log.pattern}</pattern>
        </encoder>
    </appender>
    <appender name="infoAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--    文件路径    -->
        <file>${log.path}/info-log1.log</file>
        <!--        定义滚动策略。   基于时间的滚动策略-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 日志文件名格式  带有.gz 会自动压缩-->
            <fileNamePattern>${log.path}/info-%d{yyyy-MM-dd}.log.gz</fileNamePattern>
            <!-- 日志最大的历史 30天 -->
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>${log.pattern}</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <!-- 如果是INFO级别，直接记录  匹配时的操作：接收（记录） -->
            <onMatch>ACCEPT</onMatch>
            <!-- 如果不是，拒绝   不匹配时的操作：拒绝（不记录） -->
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <appender name="errorAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--    文件路径    -->
        <file>${log.path}/error.log</file>
        <!--        定义滚动策略。   基于时间的滚动策略-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 日志文件名格式  带有.gz 会自动压缩-->
            <fileNamePattern>${log.path}/error-%d{yyyy-MM-dd}.log.gz</fileNamePattern>
            <!-- 日志最大的历史 30天 -->
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>${log.pattern}</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <!-- 如果是ERROR级别，直接记录  匹配时的操作：接收（记录） -->
            <onMatch>ACCEPT</onMatch>
            <!-- 如果不是，拒绝   不匹配时的操作：拒绝（不记录） -->
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>


    <!--mybatis log configure-->
    <logger name="com.apache.ibatis" level="TRACE"/>
    <logger name="java.sql.Connection" level="DEBUG"/>
    <logger name="java.sql.Statement" level="DEBUG"/>
    <logger name="java.sql.PreparedStatement" level="DEBUG"/>


    <!--系统操作日志-->
    <!--    <root level="INFO">-->
    <!--        <appender-ref ref="console"/>-->
    <!--    </root>-->
    <!-- 配置自己写的代码的日志记录器    对应包里面的日志才会被记录  additivity表示我们自定义的日志输出 -->
    <logger name="com.raptor" level="INFO" additivity="true">
        <appender-ref ref="infoAppender"/>
        <appender-ref ref="errorAppender"/>
    </logger>

</configuration>